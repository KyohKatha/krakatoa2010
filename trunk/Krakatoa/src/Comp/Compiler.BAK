package Comp;

import AST.*;
import Lexer.*;

import java.io.*;
import java.util.*;


public class Compiler {
    
      // compile must receive an input with an character less than 
      // p_input.lenght
   public Program compile( char []input, PrintWriter outError ) {
        
       error = new CompilerError( lexer, new PrintWriter(outError) );
       symbolTable = new SymbolTable();
       lexer = new Lexer(input, error);
       error.setLexer(lexer);
        
        
       Program p = null;
       try {
          lexer.nextToken();
          if ( lexer.token == Symbol.EOF )
             error.show("Unexpected EOF");
          p = program();
          if ( lexer.token != Symbol.EOF ) {
             p = null;
             error.show("EOF expected");
          }
       } catch ( Exception e ) {
              // the below statement prints the stack of called methods.
              // of course, it should be removed if the compiler were 
              // a production compiler.
              
              //e.printStackTrace();
          p = null;
       }
       
       return p;   
   }
    
   
   private Program program() {
     // Program ::=  ClassDec { ClassDec }
     
      classDec();
      while ( lexer.token == Symbol.CLASS ) 
         classDec();
      return null;
   }

   private void classDec() {
      // Note que os métodos desta classe não correspondem exatamente às regras
      // da gramática. Este método classDec, por exemplo, implementa 
      // a produção ClassDec (veja abaixo) e partes de outras produções.
    
      /* ClassDec ::=   ``class'' Id [ ``extends''  Id ] 
                        "{"   MemberList "}"
         MemberList ::= { Member }
         Member ::= InstVarDec | MethodDec                        
         InstVarDec ::= [ "static"  ] "private"  Type  IdList  ";"         
         MethodDec ::= Qualifier ReturnType Id "("[ FormalParamDec ]  ")"
                       "{"  StatementList "}" 
         Qualifier} ::=  [ "static"  ] ( "private" |  "public" )         
      */
      if ( lexer.token != Symbol.CLASS ) 
         error.show("'class' expected");
      lexer.nextToken();
      if ( lexer.token != Symbol.IDENT )
         error.show(CompilerError.identifier_expected);
      String className = lexer.getStringValue();
      
      lexer.nextToken();
      if ( lexer.token == Symbol.EXTENDS ) {
         lexer.nextToken();
         if ( lexer.token != Symbol.IDENT )
            error.show(CompilerError.identifier_expected);
         String superclassName = lexer.getStringValue();
         
         lexer.nextToken();
      }
      if ( lexer.token != Symbol.LEFTCURBRACKET )
         error.show("{ expected", true);
      lexer.nextToken();
      
      
      while ( lexer.token == Symbol.PRIVATE ||
              lexer.token == Symbol.PUBLIC  ) {
         
         int qualifier;
         switch( lexer.token ) {
            case Symbol.PRIVATE:
               lexer.nextToken();
               qualifier = Symbol.PRIVATE;
               break;
            case Symbol.PUBLIC:
               lexer.nextToken();
               qualifier = Symbol.PUBLIC;
               break;
            default :
               error.show("private, or public expected");
               qualifier = Symbol.PUBLIC;
         }
         Type t = type();
         if ( lexer.token != Symbol.IDENT )
            error.show("Identifier expected");
         String name = lexer.getStringValue();
         lexer.nextToken();
         if ( lexer.token == Symbol.LEFTPAR )
            methodDec(t, name, qualifier);
         else if ( qualifier != Symbol.PRIVATE )
            error.show("Attempt to declare a public instance variable");
         else
            instanceVarDec(t, name);
      }
      if ( lexer.token != Symbol.RIGHTCURBRACKET )
         error.show("public/private or \"}\" expected");
      lexer.nextToken();
      
   }
   
   
   private void instanceVarDec( Type type, String name ) {
      //   InstVarDec ::= [ "static"  ] "private"  Type  IdList  ";"         
    
    
      while ( lexer.token == Symbol.COMMA ) {
         lexer.nextToken();
         if ( lexer.token != Symbol.IDENT )
            error.show("Identifier expected");
         String variableName = lexer.getStringValue();
         lexer.nextToken();
      }
      if ( lexer.token != Symbol.SEMICOLON )
         error.show(CompilerError.semicolon_expected);
      lexer.nextToken();
   }
   
   

   private void methodDec(Type type, String name, int qualifier ) {
      /*   MethodDec ::= Qualifier ReturnType Id "("[ FormalParamDec ]  ")"
                       "{"  StatementList "}" 
      */
    
      lexer.nextToken();
      if ( lexer.token != Symbol.RIGHTPAR )
         formalParamDec();
      if ( lexer.token != Symbol.RIGHTPAR )
         error.show(") expected");      
      
      lexer.nextToken();
      if ( lexer.token != Symbol.LEFTCURBRACKET ) 
         error.show("{ expected");
         
      lexer.nextToken();
      statementList();
      if ( lexer.token != Symbol.RIGHTCURBRACKET ) 
         error.show("} expected");
         
      lexer.nextToken();
         
   }




   private void localDec( Type type ) {
      // LocalDec ::= Type IdList ";"
            
      if ( lexer.token != Symbol.IDENT ) 
         error.show("Identifier expected");
      Variable v = new Variable(lexer.getStringValue(), type);
      lexer.nextToken();
      while ( lexer.token == Symbol.COMMA ) {
         lexer.nextToken();
         if ( lexer.token != Symbol.IDENT ) 
            error.show("Identifier expected");
         v = new Variable(lexer.getStringValue(), type);
         lexer.nextToken();
      }
   }

   
   
          
   private void formalParamDec() {
      //  FormalParamDec ::= ParamDec { "," ParamDec }
      
      paramDec();
      while ( lexer.token == Symbol.COMMA ) {
         lexer.nextToken();
         paramDec();
      }
   }

   private void paramDec() {
      // ParamDec ::= Type Id

      type();
      if ( lexer.token != Symbol.IDENT )
         error.show("Identifier expected");
      lexer.nextToken();
   }
        

    private Type type() {
        // Type ::= BasicType | Id
        Type result;
        
        switch ( lexer.token ) {
            case Symbol.INT :
               result = Type.intType;
               break;
            case Symbol.BOOLEAN :
               result = Type.booleanType;
               break;
            case Symbol.STRING :
               result = Type.stringType;
               break;
            case Symbol.VOID :
               result = Type.voidType;
               break;
            case Symbol.IDENT :
               //# corrija: faça uma busca na TS para buscar a classe
               // IDENT deve ser uma classe.
               result = null;
               break;
            default :
              error.show("Type expected");
              result = Type.undefinedType;
        }
        lexer.nextToken();
        return result;
    }
    
        
        

    private void compositeStatement() {
        
        lexer.nextToken();
        statementList();
        if ( lexer.token != Symbol.RIGHTCURBRACKET )
          error.show("} expected");
        else
          lexer.nextToken();
    }



   private void statementList() {
       // CompStatement ::= "{" { Statement } "}"
       int tk;
          // statements always begin with an identifier, if, read, write, ...
       while ( (tk = lexer.token) != Symbol.RIGHTCURBRACKET && 
               tk != Symbol.ELSE ) 
          statement();
   }
            
            
            
   private void statement() {
     /*
        Statement ::= Assignment ``;'' | IfStat |WhileStat 
            |  MessageSend ``;''  | ReturnStat ``;''  
            |  ReadStat ``;'' | WriteStat ``;'' | ``break'' ``;'' 
            | ``;'' | CompStatement | LocalDec     
     */
           
      switch (lexer.token) {
         case Symbol.IDENT :
         case Symbol.SUPER :
         case Symbol.THIS :
         case Symbol.INT :
         case Symbol.BOOLEAN :
         case Symbol.STRING:
            assignmentMessageSendLocalVarDecStatement();
            break;
         case Symbol.IF :
            ifStatement();
            break;
         case Symbol.WHILE :
            whileStatement();
            break;
         case Symbol.RETURN :
            returnStatement();
            break;
         case Symbol.READ :
            readStatement();
            break;
         case Symbol.WRITE :
            writeStatement();
            break;
         case Symbol.BREAK :
            breakStatement();
            break;
         case Symbol.SEMICOLON :
            nullStatement();
            break;
         case Symbol.LEFTCURBRACKET :
            compositeStatement();
            break;
         default :
            error.show("Statement expected");
      }
   }
    
   private Statement assignmentMessageSendLocalVarDecStatement() {
     /*
       Assignment ::= LeftValue "=" Expression
       LeftValue} ::= [ "this" "." ] Id
       MessageSend ::= ReceiverMessage "." Id "("  [ ExpressionList ] ")"
       ReceiverMessage ::=  "super" | Id | "this" | "this" "."  Id
       LocalDec ::= Type IdList ";"
     */
    
    
      // an assignment, a message send or a local variable declaration
      /*
      ##########################################################################
      ##########################################################################
                          IMPORTANTE:
           a implementação deste método é muitíssimo parecido com o do método 
      factor. Neste método, factor, coloquei **muito** mais partes implementadas
      do que neste método assignmentMessageSendLocalVarDecStatement. A grande
      diferença entre os dois métodos é que factor analisa uma expressão e 
      assignmentMessageSendLocalVarDecStatement analisa uma instrução. Isto é, um
      envio de mensagem "x.m()" em factor deve retornar um valor e em 
      assignmentMessageSendLocalVarDecStatement não deve retornar nada.
           Resumindo: faça factor primeiro e depois copie e cole grande parte do 
      que você fez para este método.
      
      ##########################################################################
      ##########################################################################

      */
      
    
      String methodName, variableName;
      ExprList exprList;
      Statement result = null;
      /*
         there are eight possibilities:
            super.id()
            this.id()
            this.id = expr
            this.id.id()
            id = expr
            id.id()
            
            Id IdList  // Id is a type
            int IdList or boolean IdList or String IdList
      */
      
      switch ( lexer.token ) {
         case Symbol.SUPER :
               // super.id()
            lexer.nextToken();
            if ( lexer.token != Symbol.DOT ) 
               error.show(". expected");            
            lexer.nextToken();
            if ( lexer.token != Symbol.IDENT )
               error.show(CompilerError.identifier_expected);
            methodName = lexer.getStringValue();
            lexer.nextToken();
            exprList = getRealParameters();
            //# corrija
            // result = new MessageSendStatement( 
            //     new MessageSendToSuper( pointer to class, pointer to method, exprList) );
            break;
         case Symbol.THIS :
            lexer.nextToken();
            if ( lexer.token != Symbol.DOT ) 
               error.show(". expected");
            lexer.nextToken();
            if ( lexer.token != Symbol.IDENT )
               error.show(CompilerError.identifier_expected);
            String ident = lexer.getStringValue();
            lexer.nextToken();
            switch ( lexer.token ) {
               case Symbol.ASSIGN :
                     // this.id = expr 
                  lexer.nextToken();
                  Expr anExpr = expr();
                  //# corrija
                  /* result = new AssignmentStatement( pointer to instance variable,
                        anExpr); */
                  break;
               case Symbol.DOT :
                     // this.id.id() 
                  lexer.nextToken();
                  if ( lexer.token != Symbol.IDENT )
                     error.show(CompilerError.identifier_expected);
                  methodName = lexer.getStringValue();
                  lexer.nextToken();
                  exprList = getRealParameters();
                  //# corrija
                  /* result = new MessageSendStatement( 
                        new MessageSendToVariable( pointer to variable,
                           pointer to method, exprList) );  */
                  break;
               case Symbol.LEFTPAR :
                     // this.id()
                  exprList = getRealParameters();
                  //# corrija
                  /* result = new MessageSendStatement( 
                       new MessageSendToSelf( pointer to method, exprList ) ); */
                  break;
               default :
                  error.show(CompilerError.identifier_expected);
            }
            break;
         case Symbol.IDENT :
            variableName = lexer.getStringValue();
            lexer.nextToken();
            switch ( lexer.token ) {
               case Symbol.IDENT :
                    // id id;
                    // variableName id
                    
                    // variableName must be the name of a class
                    // replace null in the statement below by 
                    // a point to the class named variableName.
                    // A search in the symbol table is necessary.
                  localDec(null);
                  break;
               case Symbol.ASSIGN : 
                     // id = expr
                  lexer.nextToken();
                  Expr anExpr = expr();
                  //# corrija
                  /* result = new AssignmentStatement( pointer to variable,
                        anExpr ); */
                  break;
               case Symbol.DOT :
                     // id.id()
                  lexer.nextToken();
                  methodName = lexer.getStringValue();
                  lexer.nextToken();
                  exprList = getRealParameters();
                  //# corrija
                  /* result = new MessageSendStatement( 
                         new MessageSendToVariable( pointer to variable,
                               pointer to method, exprList ) ); */
                  break;
               default :
                  error.show(". or = expected");
            }
            break;
         case Symbol.INT :
            lexer.nextToken();
            localDec(Type.intType);
            break;
         case Symbol.BOOLEAN :
            lexer.nextToken();
            localDec(Type.booleanType);
            break;
         case Symbol.STRING:
            lexer.nextToken();
            localDec(Type.stringType);
            break;
         default :
            error.show("'this', 'super', basic type or identifier expected");
      }
      if ( lexer.token != Symbol.SEMICOLON )
         error.show(CompilerError.semicolon_expected);
      lexer.nextToken();
      return result;
   }

    
   private ExprList getRealParameters() {
      ExprList anExprList = null;
      
      if ( lexer.token != Symbol.LEFTPAR ) 
         error.show("( expected");
      lexer.nextToken();
      if ( startExpr(lexer.token) )
         anExprList = exprList();
      if ( lexer.token != Symbol.RIGHTPAR )
         error.show(") expected");
      lexer.nextToken();
      return anExprList;
   }
    
   private void ifStatement() {
        
      lexer.nextToken();
      if ( lexer.token != Symbol.LEFTPAR ) 
         error.show("( expected");
      lexer.nextToken();
      expr();
      if ( lexer.token != Symbol.RIGHTPAR ) 
         error.show(") expected");
      lexer.nextToken();
      statement();
      if ( lexer.token == Symbol.ELSE ) {
         lexer.nextToken();
         statement();
      }
   }
            
   private void whileStatement() {

      lexer.nextToken();
      if ( lexer.token != Symbol.LEFTPAR ) 
         error.show("( expected");
      lexer.nextToken();
      expr();
      if ( lexer.token != Symbol.RIGHTPAR ) 
         error.show(") expected");
      lexer.nextToken();
      statement();
   }
    
    
   private void returnStatement() {
        
      lexer.nextToken();
      expr();
      if ( lexer.token != Symbol.SEMICOLON )
         error.show(CompilerError.semicolon_expected);
      lexer.nextToken();
   }
          
            
   private void readStatement() {
      lexer.nextToken();
      if ( lexer.token != Symbol.LEFTPAR ) 
         error.show("( expected");
      lexer.nextToken();
      while ( true ) {
         if ( lexer.token == Symbol.THIS ) {
            lexer.nextToken();
            if ( lexer.token != Symbol.DOT ) 
               error.show(". expected");
            lexer.nextToken();
         }
         if ( lexer.token != Symbol.IDENT )
            error.show(CompilerError.identifier_expected);
         
         String name = (String ) lexer.getStringValue();
         lexer.nextToken();
         if ( lexer.token == Symbol.COMMA )
            lexer.nextToken();
         else
            break;
      }
      
      if ( lexer.token != Symbol.RIGHTPAR ) 
         error.show(") expected");
      lexer.nextToken();
      if ( lexer.token != Symbol.SEMICOLON )
         error.show(CompilerError.semicolon_expected);
      lexer.nextToken();
   }
    
    
   private void writeStatement() {
        
      lexer.nextToken();
      if ( lexer.token != Symbol.LEFTPAR ) 
         error.show("( expected");
      lexer.nextToken();
      exprList();
      if ( lexer.token != Symbol.RIGHTPAR ) 
          error.show(") expected");
      lexer.nextToken();
      if ( lexer.token != Symbol.SEMICOLON )
         error.show(CompilerError.semicolon_expected);
      lexer.nextToken();
   }
        

   private void breakStatement() {
      lexer.nextToken();
      if ( lexer.token != Symbol.SEMICOLON )
         error.show(CompilerError.semicolon_expected);
      lexer.nextToken();
   }

   
   private void nullStatement() {
      lexer.nextToken();
   }
   
    
   private ExprList exprList() {
      // ExpressionList ::= Expression { "," Expression }
    
    
      ExprList anExprList = new ExprList();
      anExprList.addElement(expr());
      while ( lexer.token == Symbol.COMMA ) {
         lexer.nextToken();
         anExprList.addElement(expr());
      }
      return anExprList;
   }



   private Expr expr() {
    
      Expr left = simpleExpr();
      int op = lexer.token;
      if ( op == Symbol.EQ || op == Symbol.NEQ || 
           op == Symbol.LE || op == Symbol.LT ||
           op == Symbol.GE || op == Symbol.GT  ) {
         lexer.nextToken();
         Expr right = simpleExpr();
         left = new CompositeExpr( left, op, right );
      }
      return left;
   }


   private Expr simpleExpr() {
      int op;
      
      Expr left = term();
      while ( (op = lexer.token) == Symbol.PLUS || op == Symbol.MINUS || 
              op == Symbol.OR ) {
         lexer.nextToken();
         Expr right = term();
         left = new CompositeExpr( left, op, right );
      }
      return left;
   }


   private Expr term() {
      int op;
      
      Expr left = signalFactor();
      while ( (op = lexer.token) == Symbol.MULT || op == Symbol.DIV || 
              op == Symbol.AND ) {
         lexer.nextToken();
         Expr right = signalFactor();
         left = new CompositeExpr( left, op, right );
      }
      return left;
   }
   
   
   private Expr signalFactor() {
      int op;
      if ( (op = lexer.token) == Symbol.PLUS || op == Symbol.MINUS ) {
         lexer.nextToken();
         return new SignalExpr(op, factor());
      }
      else
         return factor();
   }
   


    private Expr factor() {
      /*
        Factor ::= BasicValue | RightValue | MessageSend  | "(" Expression ")" 
           | "!" Factor | "null" | ObjectCreation      
        BasicValue ::= IntValue | BooleanValue | StringValue
        BooleanValue ::= "true" | "false"
        RightValue ::= "this" [ "." Id ] | Id
        MessageSend ::= ReceiverMessage "." Id "("  [ ExpressionList ] ")"
        ReceiverMessage ::=  "super" | Id | "this" | "this" "."  Id
        
      */
      
      Expr e;
      Variable aVariable;
      ClassDec aClass;
      //MethodDec aMethod;
      InstanceVariable anInstanceVariable;
      
      switch ( lexer.token ) {
         case Symbol.TRUE :
           lexer.nextToken();
           return BooleanExpr.True;
         case Symbol.FALSE :
           lexer.nextToken();
           return BooleanExpr.False;
         case Symbol.LITERALSTRING :
           String literalString = lexer.getLiteralStringValue();
           lexer.nextToken();
           return new LiteralStringExpr(literalString);
         case Symbol.LEFTPAR :
            lexer.nextToken();
            e = expr();
            if ( lexer.token != Symbol.RIGHTPAR ) 
               error.show(") expected");
            lexer.nextToken();
            return new ParenthesisExpr(e);
         case Symbol.NUMBER :
            return number();
         case Symbol.NOT :
            lexer.nextToken();
            e = expr();
            return new UnaryExpr( e, Symbol.NOT );
         case Symbol.NULL :
            lexer.nextToken();
            return new NullExpr();
         case Symbol.NEW :
            lexer.nextToken();
            if ( lexer.token != Symbol.IDENT ) 
               error.show("Identifier expected");
             
            String className = lexer.getStringValue();
            /*
               // encontre a classe className in symbol table
            ClassDec aClass = symbolTable.getInGlobal(className);   
            if ( aClass == null ) ...
            */
            

            lexer.nextToken();
            if ( lexer.token != Symbol.LEFTPAR ) 
               error.show("( expected");
            lexer.nextToken();
            if ( lexer.token != Symbol.RIGHTPAR )
               error.show(") expected");
            lexer.nextToken();
            /* return an object representing the creation of an object
              something as
            return new Cria_um_objeto(aClass);
            é importante não utilizar className, uma string e sim aClass, um objeto.
            */
            return null;
         default :
            String variableName, methodName;   
            ExprList exprList;
               /* there are seven cases to consider :
                     x
                     x.m()
                     super.m()
                     this.x
                     this
                     this.m()
                     this.x.m();
                     
                  in which x is either a variable or 
                  an instance variable and m is a method
               */
            switch ( lexer.token ) {
               case Symbol.IDENT :
                  variableName = lexer.getStringValue();
                  lexer.nextToken();
                  if ( lexer.token != Symbol.DOT ) {
                     // expression of the kind "x"
                     //# corrija
                     /* 
                       if ( (aVariable = symbolTable.get...(variableName)) == null )
                           ...
                       return new VariableExpr(aVariable);
                     */
                  }
                  else {
                       // expression of the kind "x.m()"
                     lexer.nextToken();  // eat the dot
                     switch ( lexer.token ) {
                        case Symbol.IDENT :
                           methodName = lexer.getStringValue();
                           lexer.nextToken();
                           exprList = getRealParameters();
                           //#  corrija
                           /* 
                           
                            if ( (aVariable = symbolTable.getInLocal(variableName)) != null ) {
                               // x is a variable
                               Type t = aVariable.getType();
                               teste se t é do tipo ClassDec nesta linha
                               aClass = (ClassDec ) t;
                               verifique se a classe aClass possui um método chamado methodName 
                               que pode receber como parâmetros as expressões de exprList. 
                               Algo como (apenas o início):
                                  aMethod = aClass.searchMethod(methodName);
                                  ...
                               return new MessageSendToVariable(
                                 aVariable, aMethod, exprList);
                          
                            }
                            else {
                                // em "x.m()", x is not a variable. Should be a class name
                            	if ( (aClass = symbolTable.getInGlobal(variableName)) == null )
                          	       ...
                                nesta linha, verifique se methodName é um método estático da 
                                classe aClass que pode aceitar como parâmetros as expressões de exprList.
                                Algo como (apenas o início):
                                   aStaticMethod = aClass.searchStaticMethod(methodName);
                                   ...
                                return new MessageSendStatic(aClass, aStaticMethod, exprList);
                            }

                                 
                           */
                                 
                           break;
                        default :
                           error.show(CompilerError.identifier_expected);
                     }
                  }
                  break;
               case Symbol.SUPER :
                    // expression of the kind "super.m()"
                  lexer.nextToken();
                  if ( lexer.token != Symbol.DOT )
                     error.show(". expected");
                  lexer.nextToken();
                  if ( lexer.token != Symbol.IDENT )
                     error.show(CompilerError.identifier_expected);
                  methodName = lexer.getStringValue();
                  lexer.nextToken();
                  exprList = getRealParameters();
                  //#  corrija
                  /* 
                    deve existir uma variável de instância currentClass.
                    aClass = currentClass.getSuperclass();
                    if ( aClass == null )
                       ...
                    aMethod = aClass.getMethod(methodName);
                    if ( aMethod == null )
                       ...
                  
                    return new MessageSendToSuper(
                         aClass, aMethod, exprList);
                  */
                  break;
               case Symbol.THIS :
                  lexer.nextToken();
                  if ( lexer.token != Symbol.DOT ) {
                     // expression of the kind "this"
                     //# corrija
                     /* 
                        Verifique se não estamos em um método estático
                        o construtor da classe ThisExpr deve tomar a classe corrente
                        como parâmetro. Por quê ?
                        return new ThisExpr(currentClass);
                     */
                  }
                  else {
                     lexer.nextToken();
                     if ( lexer.token != Symbol.IDENT )
                        error.show(CompilerError.identifier_expected);
                        // it may be method name or an instance variable
                     String ident = lexer.getStringValue();
                     lexer.nextToken();
                     switch ( lexer.token ) {
                        case Symbol.LEFTPAR : 
                           // expression of the kind "this.m()"
                           //# corrija
                           exprList = getRealParameters();
                           /*
                           procure o método ident na classe corrente:
                               aMethod = currentClass.searchMethod(ident);
                               if ( aMethod == null ) 
                                  ...
                           confira se aMethod pode aceitar os parâmetros de exprList.
                           return new MessageSendToSelf( aMethod, exprList );
                           */
                           break;
                        case Symbol.DOT :
                           // expression of the kind "this.x.m()"
                           //# corrija
                           lexer.nextToken();
                           if ( lexer.token != Symbol.IDENT )
                              error.show(CompilerError.identifier_expected);
                           methodName = lexer.getStringValue();
                           lexer.nextToken();
                           exprList = getRealParameters();
                           /*
                             em this.x.m(), x está em ident e m em methodName
                             procure por x na lista de variáveis de instância da classe corrente:
                                anInstanceVariable = currentClass.searchInstanceVariable(ident);
                                if ( anInstanceVariable == null ) 
                                   ...
                             pegue a classe declarada de x, o tipo de x:
                                if ( ! (anInstanceVariable.getType() instanceof ClassDec) ) 
                                    ... // tipo de x não é uma classe, erro
                             confira se a classe de x possui método m:
                                aClass = (ClassDec ) anInstanceVariable.getType();
                                aMethod = aClass.searchMethod(methodName);
                                if ( aMethod == null )
                                   ...
                                
                           return new MessageSendToVariable( anInstanceVariable, aMethod, exprList );
                              
                           */
                        default :
                           // expression of the kind "this.x"
                           //# corrija
                           /*
                              procure x na lista de variáveis de instância da classe corrente:
                                 anInstanceVariable = currentClass.searchInstanceVariable(ident);
                                 if ( anInstanceVariable == null ) 
                                    ...
                           return new VariableExpr( anInstanceVariable )
                           */
                     }
                        
                  }
                  break;
               default : 
                  error.show(CompilerError.identifier_expected);
               }
               return null;
         }
            
   }

    
   private NumberExpr number() {
        
      NumberExpr e = null;
        
          // the number value is stored in lexer.getToken().value as an object of Integer.
          // Method intValue returns that value as an value of type int.
      int value = lexer.getNumberValue();
      lexer.nextToken();
      return new NumberExpr( value );
   }
    
    
   private boolean startExpr( int aToken ) {
    
      return 
             lexer.token == Symbol.NUMBER ||
             lexer.token == Symbol.FALSE ||
             lexer.token == Symbol.TRUE ||
             lexer.token == Symbol.THIS || 
             lexer.token == Symbol.SUPER ||
             lexer.token == Symbol.LEFTPAR ||
             lexer.token == Symbol.NOT ||
             lexer.token == Symbol.NULL ||
             lexer.token == Symbol.IDENT || 
             lexer.token == Symbol.LITERALSTRING;
           
   }
    
    
   private SymbolTable symbolTable;
   private Lexer lexer;
   private CompilerError error;
   
}
